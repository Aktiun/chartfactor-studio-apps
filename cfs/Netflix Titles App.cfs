{
    "id": "446d042b-8928-4bdf-8dcc-4c70ca72ddd8",
    "name": "Netflix Titles App",
    "description": "Application developed using CF Studio",
    "state": "home",
    "readOnly": false,
    "hasBorder": true,
    "widgetList": [
        {
            "id": "vis8aba50fb-02c7-4f44-b398-e0e18ae2dc13",
            "layout": {
                "w": 12,
                "h": 7,
                "x": 0,
                "y": 1,
                "i": "vis8aba50fb-02c7-4f44-b398-e0e18ae2dc131",
                "moved": false,
                "static": false
            },
            "title": "Titles",
            "visualization": "Raw Data Table",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"ChartFactor Elastic\");",
                "let source = provider.source(\"netflix_titles\");",
                "// Declare your fields (do not remove this comment line)",
                "const fields = [",
                "    cf.Field(\"type\", \"Type\"),",
                "    cf.Field(\"title\", \"Title\"),",
                "    cf.Field(\"release_year\", \"Release year\"),",
                "    cf.Field(\"rating\", \"Rating\"),",
                "    cf.Field(\"listed_in\", \"Genre\"),",
                "    cf.Field(\"country\", \"Country\"),",
                "    cf.Field(\"cast\", \"cast\"),",
                "    cf.Field(\"date_added\", \"date_added\"),",
                "    cf.Field(\"description\", \"description\"),",
                "    cf.Field(\"director\", \"director\"),",
                "    cf.Field(\"duration\", \"duration\"),",
                "    cf.Field(\"show_id\", \"show_id\"),",
                "    cf.Field(\"title_words.keyword\", \"title_words\"),",
                "];",
                "let myData = source.fields(fields);",
                "let color = cf.Color();",
                "color.theme({",
                "    \"headerStyle\": \"background: #1191ce; color: #fff; font-size: 16px;\",",
                "    \"headerIconStyle\": \"color: #fff; font-size: 16px;\",",
                "    \"rowOddStyle\": \"background: #fff; color: #000;\",",
                "    \"rowEvenStyle\": \"background: #eceff1; color: #000;\",",
                "    \"headerResizeLineStyle\": \"border-right-color: #fff; border-right-width: 1px;\",",
                "    \"headerHorizontalLineStyle\": \"border-bottom-color: #fff; border-bottom-width: 1px;\",",
                "    \"tpButtonActive\": \"color: #fff; background: #607d8b;\",",
                "    \"cellMoving\": \"color: black; background: #b0bec5;\",",
                "});",
                "let histogramColor = cf.Color();",
                "histogramColor.theme({ background: \"#eceff1\" });",
                "// --- Define chart options and static filters ---",
                "let myChart = myData.graph(\"Raw Data Table\")",
                "    .set(\"color\", color)",
                "    .set(\"columnFilters\", [",
                "    { field: \"type\", component: \"slicer\" },",
                "    { field: \"title\", component: \"slicer\" },",
                "    { field: \"release_year\", component: \"slicer\" },",
                "    { field: \"rating\", component: \"slicer\" },",
                "    { field: \"listed_in\", component: \"slicer\" },",
                "    { field: \"country\", component: \"slicer\" },",
                "    { field: \"cast\", component: \"slicer\" },",
                "    { field: \"date_added\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"description\", component: \"slicer\" },",
                "    { field: \"director\", component: \"slicer\" },",
                "    { field: \"duration\", component: \"slicer\" },",
                "    { field: \"show_id\", component: \"slicer\" },",
                "    { field: \"title_words.keyword\", component: \"slicer\" },",
                "])",
                "    .set(\"autoSizeColumns\", true)",
                "    .limit(100)",
                "    .set(\"columnStats\", { enabled: true, height: 70, widgetProps: [",
                "        { field: \"type\", props: { color: histogramColor } },",
                "        { field: \"title\", props: { color: histogramColor } },",
                "        { field: \"release_year\", props: { color: histogramColor } },",
                "        { field: \"rating\", props: { color: histogramColor } },",
                "        { field: \"listed_in\", props: { color: histogramColor } },",
                "        { field: \"country\", props: { color: histogramColor } },",
                "        { field: \"cast\", props: { color: histogramColor } },",
                "        { field: \"date_added\", props: { color: histogramColor } },",
                "        { field: \"description\", props: { color: histogramColor } },",
                "        { field: \"director\", props: { color: histogramColor } },",
                "        { field: \"duration\", props: { color: histogramColor } },",
                "        { field: \"show_id\", props: { color: histogramColor } },",
                "        { field: \"title_words.keyword\", props: { color: histogramColor } }",
                "    ] })",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        },
        {
            "id": "vis4ef4742b-16f9-4908-9cbc-4f6a8ff9e90e",
            "layout": {
                "w": 6,
                "h": 7,
                "x": 0,
                "y": 8,
                "i": "vis4ef4742b-16f9-4908-9cbc-4f6a8ff9e90e1",
                "moved": false,
                "static": false
            },
            "title": "Trend",
            "visualization": "Trend",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"ChartFactor Elastic\");",
                "let source = provider.source(\"netflix_titles\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"count\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"release_year\")",
                "    .limit(1000)",
                "    .sort(\"asc\", \"release_year\");",
                "let group2 = cf.Attribute(\"type\")",
                "    .limit(10)",
                "    .sort(\"asc\", \"type\");",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Legend",
                "let legend = cf.Legend()",
                "    .position(\"top\")",
                "    .width(150)",
                "    .height(23)",
                "    .sort(\"none\");",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(50)",
                "    .right(25)",
                "    .bottom(35)",
                "    .left(45);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .match({",
                "    \"Movie\": \"#0095b7\",",
                "    \"TV Show\": \"#97df0d\"",
                "})",
                "    .palette([\"#0095b7\", \"#a0b774\", \"#f4c658\", \"#fe8b3e\", \"#cf2f23\", \"#756c56\", \"#007896\", \"#47a694\", \"#f9a94b\", \"#ff6b30\", \"#e94d29\", \"#005b76\"]);",
                "let myChart = myData.graph(\"Trend\")",
                "    .set(\"legend\", legend)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"placement\", \"stacked\")",
                "    .set(\"xAxis\", { \"labelGap\": 30 })",
                "    .set(\"dataZoom\", false)",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        },
        {
            "id": "vis4b037b87-4c1f-4ced-ae7c-3aca77c659a0",
            "layout": {
                "w": 6,
                "h": 7,
                "x": 6,
                "y": 8,
                "i": "vis4b037b87-4c1f-4ced-ae7c-3aca77c659a01",
                "moved": false,
                "static": false
            },
            "title": "Title ratings",
            "visualization": "Bars",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"ChartFactor Elastic\");",
                "let source = provider.source(\"netflix_titles\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"count\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"rating\")",
                "    .limit(1000)",
                "    .sort(\"desc\", cf.Metric());",
                "let group2 = cf.Attribute(\"type\")",
                "    .limit(10)",
                "    .sort(\"asc\", \"type\");",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Legend",
                "let legend = cf.Legend()",
                "    .position(\"top\")",
                "    .width(150)",
                "    .height(23)",
                "    .sort(\"none\");",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(50)",
                "    .right(25)",
                "    .bottom(35)",
                "    .left(45);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .match({",
                "    \"Movie\": \"#0095b7\",",
                "    \"TV Show\": \"#9be708\"",
                "})",
                "    .palette([\"#0095b7\", \"#a0b774\", \"#f4c658\", \"#fe8b3e\", \"#cf2f23\", \"#756c56\", \"#007896\", \"#47a694\", \"#f9a94b\", \"#ff6b30\", \"#e94d29\", \"#005b76\"]);",
                "let myChart = myData.graph(\"Bars\").set(\"serieLabel\", { \"show\": true, \"fontStyle\": \"italic\" })",
                "    .set(\"legend\", legend)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"placement\", \"stacked\")",
                "    .set(\"xAxis\", { \"labelGap\": 30 })",
                "    .set(\"dataZoom\", false)",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        },
        {
            "id": "vis9c418dec-740e-4b36-adc3-307ba77e38cf",
            "layout": {
                "w": 6,
                "h": 13,
                "x": 0,
                "y": 15,
                "i": "vis9c418dec-740e-4b36-adc3-307ba77e38cf1",
                "moved": false,
                "static": false
            },
            "title": "Top ten countries heat map",
            "visualization": "Heat Map",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"ChartFactor Elastic\");",
                "let source = provider.source(\"netflix_titles\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"count\");",
                "let metricColor = cf.Metric(\"count\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"country\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric());",
                "let group2 = cf.Attribute(\"listed_in\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric());",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(10)",
                "    .bottom(10)",
                "    .left(10);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .palette([\"#a50026\", \"#d73027\", \"#d73027\", \"#f46d43\", \"#fdae61\", \"#fee090\"])",
                "    .metric(metricColor);",
                "let myChart = myData.graph(\"Heat Map\")",
                "    .set(\"color\", color)",
                "    .set(\"showValues\", true)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        },
        {
            "id": "visbd7d8234-5457-4abc-bb34-964b3724a7f7",
            "layout": {
                "w": 6,
                "h": 7,
                "x": 6,
                "y": 15,
                "i": "visbd7d8234-5457-4abc-bb34-964b3724a7f71",
                "moved": false,
                "static": false
            },
            "title": "Title words",
            "visualization": "Word Cloud",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"ChartFactor Elastic\");",
                "let source = provider.source(\"netflix_titles\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"count\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"title_words.keyword\")",
                "    .limit(500)",
                "    .sort(\"desc\", cf.Metric());",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(50)",
                "    .right(25)",
                "    .bottom(35)",
                "    .left(45);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .palette([\"#0095b7\", \"#005b76\"]);",
                "let myChart = myData.graph(\"Word Cloud\")",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"placement\", \"stacked\")",
                "    .set(\"xAxis\", { \"labelGap\": 30 })",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        },
        {
            "id": "visd7706deb-02a7-45bc-b310-dd238c7ece6a",
            "layout": {
                "w": 6,
                "h": 7,
                "x": 6,
                "y": 22,
                "i": "visd7706deb-02a7-45bc-b310-dd238c7ece6a1",
                "moved": false,
                "static": false
            },
            "title": "World map",
            "visualization": "Vector Map",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"ChartFactor Elastic\");",
                "let source = provider.source(\"netflix_titles\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"count\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"country\")",
                "    .limit(10000)",
                "    .sort(\"desc\", cf.Metric());",
                "let metricColor = cf.Metric(\"count\");",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .autoRange({ dynamic: true })",
                "    .palette([\"#a50026\", \"#d73027\", \"#d73027\", \"#f46d43\", \"#fdae61\", \"#fee090\"])",
                "    .metric(metricColor);",
                "let myChart = myData.graph(\"Vector Map\")",
                "    .set(\"showValues\", true)",
                "    .set(\"shape\", \"world\")",
                "    .set(\"enableZoom\", true)",
                "    .set(\"min\", 0)",
                "    .set(\"zoom\", 0.6733864678459239)",
                "    .set(\"center\", [22.165945347835873, 1.7573444636492468])",
                "    .set(\"legend\", \"left\")",
                "    .set(\"color\", color)",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        },
        {
            "id": "visa146a09c-6b85-4e40-a6ca-dba6147f644e",
            "layout": {
                "w": 12,
                "h": 1,
                "x": 0,
                "y": 0,
                "i": "visa146a09c-6b85-4e40-a6ca-dba6147f644e1",
                "moved": false,
                "static": false
            },
            "title": "### Enter your search",
            "visualization": "Text Search",
            "source": {
                "name": "netflix_titles",
                "provider": {
                    "name": "ChartFactor Elastic",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// --- Define chart options and static filters ---",
                "let myChart = cf.create()",
                "\t\t\t.graph(\"Text Search\")",
                "\t\t\t.execute()"
            ],
            "showUI": false,
            "syncedFields": [
                "type",
                "title",
                "release_year",
                "rating",
                "listed_in",
                "country"
            ],
            "showTitle": true
        }
    ],
    "filters": [],
    "savedFilters": [],
    "folderPath": "/",
    "deletedWidgets": [],
    "IM": {
        "id": "cfs-interaction-manager",
        "isIManager": true,
        "layout": null,
        "title": "Filters",
        "visualization": "Interaction Manager",
        "source": {},
        "code": [
            "let viz2 = getId(\"World map\");",
            "let viz1 = getId(\"Title words\");",
            "let rules1 = { [viz2]: { clientFilters: false }, [viz1]: { clientFilters: true } };",
            "/* Configuration code for the Interaction Manager*/",
            "// Drill hierarchy and rule settings can be done like this:",
            "// let viz1 = getId(\"widget_title_1\")",
            "// let viz2 = getId(\"widget_title_2\")",
            "// let drill = { [viz1]: { group1: []}}",
            "// let rules = { [viz2]: { receive: false }}",
            "// NOTE: Drill hierarchy will change your code!",
            "// Define options",
            "let aktive = cf.create();",
            "let myChart = aktive.graph(\"Interaction Manager\")",
            "    //.set(\"rules\", rules)",
            "    //.set(\"drill\", drill)",
            "    .set(\"rules\", rules1)",
            "    .execute();",
            ""
        ],
        "showUI": false,
        "syncedFields": [],
        "showTitle": true
    },
    "hideIM": false,
    "metadata": {
        "ChartFactor Elastic": [
            "let _META_ = {\r",
            "    \"netflix_titles\": {\r",
            "        \"fields\": {\r",
            "            \"type\": {\r",
            "                \"label\": \"Type\"\r",
            "            },\r",
            "            \"title\": {\r",
            "                \"label\": \"Title\"\r",
            "            },\r",
            "            \"release_year\": {\r",
            "                \"label\": \"Release year\"\r",
            "            },\r",
            "            \"rating\": {\r",
            "                \"label\": \"Rating\"\r",
            "            },\r",
            "            \"listed_in\": {\r",
            "                \"label\": \"Genre\"\r",
            "            },\r",
            "            \"country\": {\r",
            "                \"label\": \"Country\"\r",
            "            }\r",
            "        }\r",
            "    }\r",
            "};\r",
            ""
        ]
    },
    "customQueries": {}
}||||[
    {
        "name": "ChartFactor Elastic",
        "url": "https://chartfactor.com/vcairlines",
        "active": true,
        "provider": "elasticsearch",
        "id": "73500ec4-291a-46ac-b185-6b68992c6bd7"
    }
]