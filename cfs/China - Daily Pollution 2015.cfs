{
    "id": "67dfb67e-d759-494f-997b-681776dc7314",
    "name": "China - Daily Pollution 2015",
    "description": "Application developed using CF Studio",
    "state": "home",
    "readOnly": false,
    "hasBorder": true,
    "widgetList": [
        {
            "id": "vis21d66460-773d-4882-bf65-004744eca672",
            "layout": {
                "w": 6,
                "h": 6,
                "x": 0,
                "y": 2,
                "i": "vis21d66460-773d-4882-bf65-004744eca6721",
                "moved": false,
                "static": false
            },
            "title": "### Air Pollution By Month",
            "visualization": "Trend",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"AQI\", \"avg\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"Date\")",
                "    .limit(1000).func(\"MONTH\")",
                "    .sort(\"asc\", \"Date\");",
                "let group2 = cf.Attribute(\"City\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric(\"AQI\", \"avg\"));",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Legend",
                "let legend = cf.Legend()",
                "    .position(\"right\")",
                "    .width(150)",
                "    .height(\"95%\")",
                "    .sort(\"none\");",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(25)",
                "    .bottom(35)",
                "    .left(45);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .match({",
                "    \"Chengdu\": \"#ff0029\",",
                "    \"Shenyang\": \"#377eb8\",",
                "    \"Tianjin\": \"#66a61e\",",
                "    \"Beijing\": \"#984ea3\",",
                "    \"Shanghai\": \"#00d2d5\",",
                "    \"Guangzhou\": \"#ff7f00\",",
                "    \"Shenzhen\": \"#af8d00\"",
                "})",
                "    .palette([\"#ff0029\", \"#377eb8\", \"#66a61e\", \"#984ea3\", \"#00d2d5\", \"#ff7f00\", \"#af8d00\", \"#7f80cd\", \"#b3e900\", \"#c42e60\", \"#a65628\", \"#f781bf\"]);",
                "let myChart = myData.graph(\"Trend\")",
                "    .set(\"legend\", legend)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"xAxis\", { \"labelGap\": 30 })",
                "    .set(\"dataZoom\", false)",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "showTitle": true
        },
        {
            "id": "vis3d398cf1-0ea5-46ec-b185-2897fc05de49",
            "layout": {
                "w": 6,
                "h": 6,
                "x": 6,
                "y": 2,
                "i": "vis3d398cf1-0ea5-46ec-b185-2897fc05de491",
                "moved": false,
                "static": false
            },
            "title": "### Main pollutant by month",
            "visualization": "Trend",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "let filter205 = cf.Filter(\"Main Pollutant\")",
                "    .label(\"Main Pollutant\")",
                "    .operation(\"IN\")",
                "    .value([\"PM2.5\", \"PM10,PM2.5\", \"PM2.5,O3\", \"O3\", \"SO2,PM2.5\", \"CO\", \"PM10\", \"SO2\", \"NO2,PM2.5\", \"NO2\"]);",
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"AQI\", \"avg\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"Date\")",
                "    .limit(100).func(\"MONTH\")",
                "    .sort(\"asc\", \"Date\");",
                "let group2 = cf.Attribute(\"Main Pollutant\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric(\"AQI\", \"avg\"));",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Legend",
                "let legend = cf.Legend()",
                "    .position(\"right\")",
                "    .width(150)",
                "    .height(\"95%\")",
                "    .sort(\"none\");",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(25)",
                "    .bottom(35)",
                "    .left(45);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .palette([\"#ff0029\", \"#377eb8\", \"#66a61e\", \"#984ea3\", \"#00d2d5\", \"#ff7f00\", \"#af8d00\", \"#7f80cd\", \"#b3e900\", \"#c42e60\", \"#a65628\", \"#f781bf\"]);",
                "myData.staticFilters(filter205);",
                "let myChart = myData.graph(\"Trend\")",
                "    .set(\"legend\", legend)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .set(\"xAxis\", { \"labelGap\": 30 })",
                "    .set(\"dataZoom\", false)",
                "    .execute();",
                ""
            ],
            "showUI": false,
            "showTitle": true
        },
        {
            "id": "vis1f5b8029-680d-43a8-9a6f-c447220571ba",
            "layout": {
                "w": 12,
                "h": 2,
                "x": 0,
                "y": 0,
                "i": "vis1f5b8029-680d-43a8-9a6f-c447220571ba1",
                "moved": false,
                "static": false
            },
            "title": "Time Slider",
            "visualization": "Time Slider",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "//<end filter212>",
                "let grid = cf.Grid().right(20).left(10);",
                "// Define the time field to be used",
                "let field = cf.Attribute(\"Date\").func(\"MONTH\");",
                "let myData = source.timeField(field);",
                "//<end exec filter212>",
                "let myChart = myData.graph(\"Time Slider\")",
                "    .set(\"grid\", grid)",
                "    .set(\"single-period\", true)",
                "    .set(\"player\", {",
                "    \"enable\": true,",
                "    \"pin-left\": false,",
                "    \"step\": 1,",
                "    \"step-unit\": \"MONTH\",",
                "    \"refresh\": 2,",
                "    \"animation-delay\": 0.5,",
                "    \"live\": false,",
                "    \"autoplay\": false,",
                "})",
                "    .execute();",
                ""
            ],
            "showUI": false,
            "showTitle": false
        },
        {
            "id": "visd1832997-e02f-4d9f-a623-49594ed10616",
            "layout": {
                "w": 6,
                "h": 6,
                "x": 0,
                "y": 14,
                "i": "visd1832997-e02f-4d9f-a623-49594ed106161",
                "moved": false,
                "static": false
            },
            "title": "### Air Quality status in 2015",
            "visualization": "Floating Bubbles",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "//<end filter212>",
                "// Define metrics",
                "let metrics = [",
                "    cf.Metric(\"AQI\", \"avg\"),",
                "    cf.Metric(\"Grade\", \"avg\")",
                "];",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"City\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric(\"AQI\", \"avg\"));",
                "let group2 = cf.Attribute(\"Main Pollutant\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric(\"Grade\", \"avg\"));",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(...metrics);",
                "//<end exec filter212>",
                "let myChart = myData.graph(\"Floating Bubbles\")",
                "    .set(\"legend\", \"right\")",
                "    .execute();",
                ""
            ],
            "showUI": false,
            "showTitle": true
        },
        {
            "id": "vis1bbd2a55-ca56-4209-81d8-5ac663054d19",
            "isMarkup": true,
            "layout": {
                "w": 6,
                "h": 3,
                "x": 0,
                "y": 20,
                "i": "vis1bbd2a55-ca56-4209-81d8-5ac663054d191",
                "moved": false,
                "static": false
            },
            "title": "",
            "visualization": "Markup",
            "source": {},
            "code": [
                "/* Configuration code for the Markup Widget*/",
                "",
                "// Define options",
                "let aktive = cf.create();",
                "let myChart = aktive.graph(\"Markup\")",
                "\t.set(\"content\", {\"ops\":[{\"attributes\":{\"color\":\"#444444\",\"italic\":true},\"insert\":\"“Exposure to PM <2.5 μm in diameter (PM2.5) over a few hours to weeks can trigger cardiovascular disease-related mortality and nonfatal events; longer-term exposure (eg, a few years) increases the risk for cardiovascular mortality to an even greater extent than exposures over a few days and reduces life expectancy within more highly exposed segments of the population by several months to a few years.”\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"}]})",
                "\t.set(\"enable\", false)",
                "\t.set(\"background\", \"white\")",
                "\t.set(\"lock\", false)",
                "\t.execute();",
                ""
            ],
            "showUI": false,
            "showTitle": true
        },
        {
            "id": "viscbd4d922-ee3c-4845-876a-daa522b51f89",
            "layout": {
                "w": 6,
                "h": 7,
                "x": 6,
                "y": 14,
                "i": "viscbd4d922-ee3c-4845-876a-daa522b51f891",
                "moved": false,
                "static": false
            },
            "title": "### Pollution records",
            "visualization": "Raw Data Table",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "//<end filter212>",
                "// Declare your fields (do not remove this comment line)",
                "const fields = [",
                "    cf.Field(\"AQI\", \"AQI\"),",
                "    cf.Field(\"City\", \"City\"),",
                "    cf.Field(\"Date\", \"Date\"),",
                "    cf.Field(\"Grade\", \"Grade\"),",
                "    cf.Field(\"Main Pollutant\", \"Main Pollutant\"),",
                "    cf.Field(\"Status\", \"Status\"),",
                "];",
                "let myData = source.fields(fields);",
                "let color = cf.Color();",
                "color.theme({",
                "    \"headerStyle\": \"background: #607d8b; color: #fff; font-size: 16px;\",",
                "    \"headerIconStyle\": \"color: #fff; font-size: 16px;\",",
                "    \"rowOddStyle\": \"background: #fff; color: #000;\",",
                "    \"rowEvenStyle\": \"background: #eceff1; color: #000;\",",
                "    \"headerResizeLineStyle\": \"border-right-color: #fff; border-right-width: 1px;\",",
                "    \"headerHorizontalLineStyle\": \"border-bottom-color: #fff; border-bottom-width: 1px;\",",
                "    \"tpButtonActive\": \"color: #fff; background: #607d8b;\",",
                "    \"cellMoving\": \"color: black; background: #b0bec5;\",",
                "});",
                "//<end exec filter212>",
                "let myChart = myData.graph(\"Raw Data Table\")",
                "    .set(\"color\", color)",
                "    .set(\"columnFilters\", [",
                "    { field: \"AQI\", component: \"slicer\" },",
                "    { field: \"City\", component: \"slicer\" },",
                "    { field: \"Date\", component: \"datePicker\", props: { func: \"DAY\" } },",
                "    { field: \"Grade\", component: \"slicer\" },",
                "    { field: \"Main Pollutant\", component: \"slicer\" },",
                "    { field: \"Status\", component: \"slicer\" },",
                "])",
                "    .set(\"sizeColumnsToFit\", true)",
                "    .limit(100)",
                "    .set(\"columnsWidth\", [",
                "    { \"AQI\": 153 },",
                "    { \"City\": 132 },",
                "    { \"Date\": 156 },",
                "    { \"Grade\": 129 },",
                "    { \"Main Pollutant\": 190 },",
                "    { \"Status\": 156 }",
                "])",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "showTitle": true
        },
        {
            "id": "visa56a2218-9f2a-4ec6-bd74-7aee565fd254",
            "isMarkup": true,
            "layout": {
                "w": 3,
                "h": 6,
                "x": 9,
                "y": 8,
                "i": "visa56a2218-9f2a-4ec6-bd74-7aee565fd2541",
                "moved": false,
                "static": false
            },
            "title": "",
            "visualization": "Markup",
            "source": {},
            "code": [
                "/* Configuration code for the Markup Widget*/",
                "",
                "// Define options",
                "let aktive = cf.create();",
                "let myChart = aktive.graph(\"Markup\")",
                "\t.set(\"content\", {\"ops\":[{\"attributes\":{\"alt\":\"PM2.5 AQI Chart\"},\"insert\":{\"image\":\"http://www.sparetheair.com/assets/aqi/PM2017.png\"}},{\"insert\":\"\\n\"}]})",
                "\t.set(\"enable\", false)",
                "\t.set(\"background\", \"white\")",
                "\t.set(\"lock\", false)",
                "\t.execute();",
                ""
            ],
            "showUI": false,
            "showTitle": true
        },
        {
            "id": "visa0eca3d1-7922-42fc-94ff-ef0e6a13a683",
            "isMarkup": true,
            "layout": {
                "w": 6,
                "h": 2,
                "x": 6,
                "y": 21,
                "i": "visa0eca3d1-7922-42fc-94ff-ef0e6a13a6831",
                "moved": false,
                "static": false
            },
            "title": "",
            "visualization": "Markup",
            "source": {},
            "code": [
                "/* Configuration code for the Markup Widget*/",
                "",
                "// Define options",
                "let aktive = cf.create();",
                "let myChart = aktive.graph(\"Markup\")",
                "\t.set(\"content\", {\"ops\":[{\"attributes\":{\"color\":\"#444444\"},\"insert\":\"Data source\"},{\"attributes\":{\"color\":\"#444444\",\"italic\":true},\"insert\":\": \"},{\"attributes\":{\"link\":\"https://chinapower.csis.org/data/daily-air-pollution-statistics/\"},\"insert\":\"https://chinapower.csis.org/data/daily-air-pollution-statistics/\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"},{\"attributes\":{\"color\":\"#444444\"},\"insert\":\"AQI Legend:\"},{\"insert\":\" \"},{\"attributes\":{\"link\":\"http://www.sparetheair.com/aqi.cfm\"},\"insert\":\"http://www.sparetheair.com/aqi.cfm\"},{\"attributes\":{\"header\":2},\"insert\":\"\\n\"}]})",
                "\t.set(\"enable\", false)",
                "\t.set(\"background\", \"white\")",
                "\t.set(\"lock\", false)",
                "\t.execute();",
                ""
            ],
            "showUI": false,
            "showTitle": true
        },
        {
            "id": "visc4f47a43-37d6-48c5-92c8-514ca2812904",
            "layout": {
                "w": 3,
                "h": 6,
                "x": 6,
                "y": 8,
                "i": "visc4f47a43-37d6-48c5-92c8-514ca28129041",
                "moved": false,
                "static": false
            },
            "title": "### Average Air Pollution Index",
            "visualization": "Gauge",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "//<end filter212>",
                "// Define metrics",
                "let metric0 = cf.Metric(\"AQI\", \"avg\");",
                "// Add metrics and groups to data source",
                "let myData = source",
                "    .metrics(metric0);",
                "//<end exec filter212>",
                "let myChart = myData.graph(\"Gauge\")",
                "    .set(\"ranges\", [[0, 500]])",
                "    .set(\"rangeColors\", [",
                "    [[0.1, \"green\"], [0.2, \"yellow\"], [0.3, \"orange\"], [0.4, \"red\"], [0.6, \"purple\"], [1, \"maroon\"]]",
                "])",
                "    .set(\"scaleLabel\", {",
                "    textBorderColor: \"black\",",
                "    textBorderWidth: 1,",
                "    // fontSize: 20",
                "})",
                "    .set(\"detailLabel\", {",
                "    textBorderColor: \"black\",",
                "    textBorderWidth: 2,",
                "    fontSize: 45",
                "})",
                "    .set(\"needle\", {",
                "    borderColor: \"green\",",
                "    borderWidth: 2,",
                "    opacity: 0.6",
                "})",
                "    .execute();",
                ""
            ],
            "showUI": false,
            "showTitle": true
        },
        {
            "id": "vis718574cf-3d07-4002-a62a-17466b81f97c",
            "layout": {
                "w": 6,
                "h": 6,
                "x": 0,
                "y": 8,
                "i": "vis718574cf-3d07-4002-a62a-17466b81f97c1",
                "moved": false,
                "static": false
            },
            "title": "### Main Pollutants by City",
            "visualization": "Heat Map",
            "source": {
                "name": "china-pollution",
                "provider": {
                    "name": "Elastic Demo",
                    "type": "elasticsearch"
                }
            },
            "code": [
                "// Interaction Manager uses filter(), filters(), clientFilter(),",
                "// and clientFilters() to manage filters. To apply additional",
                "// filters, use staticFilters() or your code could be overwritten.",
                "//",
                "/* Configuration code for this widget */",
                "let provider = cf.provider(\"Elastic Demo\");",
                "let source = provider.source(\"china-pollution\");",
                "// Define metrics",
                "let metric0 = cf.Metric(\"AQI\", \"avg\");",
                "let metricColor = cf.Metric(\"AQI\", \"avg\");",
                "// Define attributes to group by",
                "let group1 = cf.Attribute(\"City\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric(\"AQI\", \"avg\"));",
                "let group2 = cf.Attribute(\"Main Pollutant\")",
                "    .limit(10)",
                "    .sort(\"desc\", cf.Metric(\"AQI\", \"avg\"));",
                "// Add metrics and groups to data source",
                "let myData = source.groupby(group1, group2)",
                "    .metrics(metric0);",
                "// --- Define chart options and static filters ---",
                "// Define Grid",
                "let grid = cf.Grid()",
                "    .top(10)",
                "    .right(10)",
                "    .bottom(10)",
                "    .left(10);",
                "// Define Color Palette",
                "let color = cf.Color()",
                "    .range([",
                "    {",
                "        \"min\": 0,",
                "        \"max\": 50,",
                "        \"color\": \"green\"",
                "    },",
                "    {",
                "        \"min\": 50,",
                "        \"max\": 100,",
                "        \"color\": \"yellow\"",
                "    },",
                "    {",
                "        \"min\": 100,",
                "        \"max\": 150,",
                "        \"color\": \"orange\"",
                "    },",
                "    {",
                "        \"min\": 150,",
                "        \"max\": 200,",
                "        \"color\": \"red\"",
                "    },",
                "    {",
                "        \"min\": 200,",
                "        \"max\": 300,",
                "        \"color\": \"purple\"",
                "    },",
                "    {",
                "        \"min\": 300,",
                "        \"max\": 500,",
                "        \"color\": \"maroon\"",
                "    }",
                "])",
                "    .palette([\"#08519c\", \"#3182bd\", \"#6baed6\", \"#9ecae1\", \"#c6dbef\", \"#eff3ff\"])",
                "    .metric(metricColor);",
                "let myChart = myData.graph(\"Heat Map\")",
                "    .set(\"color\", color)",
                "    .set(\"showValues\", true)",
                "    .set(\"grid\", grid)",
                "    .set(\"color\", color)",
                "    .execute();",
                ""
            ],
            "showUI": true,
            "showTitle": true
        }
    ],
    "filters": [],
    "savedFilters": [
        {
            "id": "05b66b58-34a1-482a-b700-6f4865f7fb75",
            "data": {
                "id": "05b66b58-34a1-482a-b700-6f4865f7fb75",
                "name": "Beijing in December",
                "description": "Description 3",
                "index": 2
            },
            "filters": [
                {
                    "path": "City",
                    "label": "City",
                    "enabled": true,
                    "operation": "IN",
                    "value": [
                        "Beijing"
                    ],
                    "id": "fdfab9d8-0784-48df-96f1-24b3f1240dc4",
                    "origin": {
                        "name": "City",
                        "label": "City",
                        "sort": {
                            "name": "AQI",
                            "func": "sum",
                            "customLabel": false,
                            "label": "AQI",
                            "metricFunc": "sum",
                            "dir": "desc",
                            "is": "Metric",
                            "type": "INTEGER",
                            "originName": "AQI",
                            "originalType": "long"
                        },
                        "limit": 10,
                        "is": "Attribute",
                        "type": "ATTRIBUTE",
                        "originName": "City",
                        "originalType": "keyword",
                        "keyword": true
                    },
                    "sender": {},
                    "code": "filter216"
                },
                {
                    "path": "Date",
                    "label": "Date",
                    "enabled": true,
                    "operation": "BETWEEN",
                    "value": [
                        "2015-12-01 00:00:00.000",
                        "2015-12-31 23:59:59.999"
                    ],
                    "id": "e9421b3a-e159-4f03-ad50-db200705528e",
                    "origin": {
                        "name": "Date",
                        "label": "Date",
                        "func": "MONTH",
                        "sort": {
                            "dir": "asc",
                            "name": "Date"
                        },
                        "limit": 1000,
                        "is": "Attribute",
                        "type": "TIME",
                        "originName": "Date",
                        "originalType": "date",
                        "format": "M/d/YYYY||M/DD/yyyy||MM/d/yyyy||MM/dd/yyyy",
                        "timestampGranularity": "YEAR"
                    },
                    "sender": {},
                    "granularity": "MONTH",
                    "oneTimeUnit": true,
                    "code": "filter167"
                }
            ]
        },
        {
            "id": "0ed5e92a-003e-4209-92fb-871117676a7e",
            "data": {
                "id": "0ed5e92a-003e-4209-92fb-871117676a7e",
                "name": "Start of data",
                "description": "Description 1",
                "index": 0
            },
            "filters": [
                {
                    "path": "Date",
                    "label": "Date",
                    "enabled": true,
                    "operation": "BETWEEN",
                    "value": [
                        "2015-01-01 00:00:00.000",
                        "2015-01-01 23:59:59.999"
                    ],
                    "granularity": "DAY",
                    "source": {
                        "name": "china-pollution",
                        "provider": "Elastic Demo",
                        "fields": [
                            {
                                "name": "@timestamp",
                                "type": "TIME",
                                "originName": "@timestamp",
                                "originalType": "date",
                                "label": "@timestamp",
                                "timestampGranularity": "YEAR"
                            },
                            {
                                "name": "AQI",
                                "type": "INTEGER",
                                "originName": "AQI",
                                "originalType": "long",
                                "label": "AQI",
                                "func": "SUM"
                            },
                            {
                                "name": "City",
                                "type": "ATTRIBUTE",
                                "originName": "City",
                                "originalType": "keyword",
                                "label": "City",
                                "keyword": true
                            },
                            {
                                "name": "Date",
                                "type": "TIME",
                                "originName": "Date",
                                "originalType": "date",
                                "label": "Date",
                                "format": "M/d/YYYY||M/DD/yyyy||MM/d/yyyy||MM/dd/yyyy",
                                "timestampGranularity": "YEAR"
                            },
                            {
                                "name": "Grade",
                                "type": "INTEGER",
                                "originName": "Grade",
                                "originalType": "long",
                                "label": "Grade",
                                "func": "SUM"
                            },
                            {
                                "name": "Main Pollutant",
                                "type": "ATTRIBUTE",
                                "originName": "Main Pollutant",
                                "originalType": "keyword",
                                "label": "Main Pollutant",
                                "keyword": true
                            },
                            {
                                "name": "Status",
                                "type": "ATTRIBUTE",
                                "originName": "Status",
                                "originalType": "keyword",
                                "label": "Status",
                                "keyword": true
                            }
                        ]
                    },
                    "id": "02a8f9f8-9959-4015-958e-3dc39e8ac9a7",
                    "sender": {},
                    "origin": {
                        "name": "Date",
                        "type": "TIME",
                        "originName": "Date",
                        "originalType": "date",
                        "label": "Date",
                        "format": "M/d/YYYY||M/DD/yyyy||MM/d/yyyy||MM/dd/yyyy",
                        "timestampGranularity": "YEAR"
                    },
                    "oneTimeUnit": true,
                    "code": "filter226"
                }
            ]
        }
    ],
    "folderPath": "/",
    "deletedWidgets": [],
    "IM": {
        "id": "cfs-interaction-manager",
        "isIManager": true,
        "layout": null,
        "title": "Filters",
        "visualization": "Interaction Manager",
        "source": {},
        "code": [
            "let viz1 = getId(\"china-pollution (1)\");",
            "let rules1 = { [viz1]: { clientFilters: false } };",
            "/* Configuration code for the Interaction Manager*/",
            "// Drill hierarchy and rule settings can be done like this:",
            "// let viz1 = getId(\"widget_title_1\")",
            "// let viz2 = getId(\"widget_title_2\")",
            "// let drill = { [viz1]: { group1: []}}",
            "// let rules = { [viz2]: { receive: false }}",
            "// NOTE: Drill hierarchy will change your code!",
            "// Define options",
            "let aktive = cf.create();",
            "let myChart = aktive.graph(\"Interaction Manager\")",
            "    //.set(\"rules\", rules)",
            "    //.set(\"drill\", drill)",
            "    .set(\"rules\", rules1)",
            "    .execute();",
            ""
        ],
        "showUI": false,
        "syncedFields": [],
        "showTitle": true
    },
    "hideIM": false,
    "metadata": {},
    "customQueries": {}
}||||[
    {
        "name": "Elastic Demo",
        "url": "https://chartfactor.com/elastic",
        "active": true,
        "provider": "elasticsearch",
        "id": "217a1f8f-3439-40a8-99bc-3e85f6a81abb"
    }
]